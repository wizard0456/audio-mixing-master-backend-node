"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const multer_1 = __importDefault(require("multer"));
const AuthController_1 = require("../controllers/AuthController");
const ServiceController_1 = require("../controllers/ServiceController");
const CategoryController_1 = require("../controllers/CategoryController");
const OrderController_1 = require("../controllers/OrderController");
const CartController_1 = require("../controllers/CartController");
const PaymentController_1 = require("../controllers/PaymentController");
const auth_1 = require("../middleware/auth");
const SampleAudioController_1 = require("../controllers/SampleAudioController");
const GalleryController_1 = require("../controllers/GalleryController");
const FaqController_1 = require("../controllers/FaqController");
const TestimonialController_1 = require("../controllers/TestimonialController");
const UploadLeadController_1 = require("../controllers/UploadLeadController");
const ContactLeadController_1 = require("../controllers/ContactLeadController");
const ServiceTagController_1 = require("../controllers/ServiceTagController");
const GiftController_1 = require("../controllers/GiftController");
const LeadGenerationController_1 = require("../controllers/LeadGenerationController");
const ServicesPromoCodeController_1 = require("../controllers/ServicesPromoCodeController");
const PayPalController_1 = require("../controllers/PayPalController");
const ExcelController_1 = require("../controllers/ExcelController");
const blog_1 = __importDefault(require("./blog"));
const RevisionController_1 = require("../controllers/RevisionController");
const router = (0, express_1.Router)();
router.post('/auth/register', AuthController_1.AuthController.register);
router.post('/auth/login', AuthController_1.AuthController.login);
router.post('/auth/admin/login', AuthController_1.AuthController.adminLogin);
router.get('/auth/verify-email/:userId/:token', AuthController_1.AuthController.verifyEmail);
router.post('/auth/resend-verification', AuthController_1.AuthController.resendVerificationEmail);
router.post('/auth/forgot-password', AuthController_1.AuthController.forgotPassword);
router.post('/auth/reset-password', AuthController_1.AuthController.resetPassword);
router.get('/auth/me', auth_1.auth, AuthController_1.AuthController.getCurrentUser);
router.get('/my-favourites', auth_1.auth, AuthController_1.AuthController.getFavourites);
router.post('/my-favourites', auth_1.auth, AuthController_1.AuthController.addFavourite);
router.delete('/my-favourites/:service_id', auth_1.auth, AuthController_1.AuthController.removeFavourite);
router.get('/my-favourites/:service_id/check', auth_1.auth, AuthController_1.AuthController.checkFavourite);
router.get('/my-favourites/count', auth_1.auth, AuthController_1.AuthController.getFavouriteCount);
router.get('/sample-audios', SampleAudioController_1.SampleAudioController.index);
router.get('/sample-audios/:id', SampleAudioController_1.SampleAudioController.show);
router.get('/gallary', GalleryController_1.GalleryController.index);
router.get('/gallary/:id', GalleryController_1.GalleryController.show);
router.get('/categories', CategoryController_1.CategoryController.index);
router.get('/categories/with-count', CategoryController_1.CategoryController.getWithServices);
router.get('/tags', ServiceTagController_1.ServiceTagController.index);
router.get('/services', ServiceController_1.ServiceController.index);
router.get('/services/:tag', ServiceController_1.ServiceController.show);
router.get('/services/search', ServiceController_1.ServiceController.search);
router.get('/services/category/:categoryId', ServiceController_1.ServiceController.getByCategory);
router.get('/service-details/:id', ServiceController_1.ServiceController.getServiceDetails);
router.get('/services-list', ServiceController_1.ServiceController.index);
router.get('/my-gifts', GiftController_1.GiftController.index);
router.get('/my-gifts/:id', GiftController_1.GiftController.show);
router.get('/lead/generation', LeadGenerationController_1.LeadGenerationController.index);
router.get('/lead/generation/:id', LeadGenerationController_1.LeadGenerationController.show);
router.post('/lead/generation', LeadGenerationController_1.LeadGenerationController.store);
router.delete('/lead/generation/:id', LeadGenerationController_1.LeadGenerationController.destroy);
router.get('/upload/lead/gen', UploadLeadController_1.UploadLeadController.index);
router.get('/upload/lead/gen/:id', UploadLeadController_1.UploadLeadController.show);
const upload = (0, multer_1.default)();
router.post('/upload/lead/gen', upload.none(), UploadLeadController_1.UploadLeadController.store);
router.delete('/upload/lead/gen/:id', UploadLeadController_1.UploadLeadController.destroy);
router.get('/download/zip/lead/:id', UploadLeadController_1.UploadLeadController.downloadZip);
router.post('/download-audio/:id', UploadLeadController_1.UploadLeadController.downloadAudio);
router.get('/export/lead', LeadGenerationController_1.LeadGenerationController.exportLead);
router.get('/contact/lead/generation', ContactLeadController_1.ContactLeadController.index);
router.get('/contact/lead/generation/:id', ContactLeadController_1.ContactLeadController.show);
router.post('/contact/lead/generation', ContactLeadController_1.ContactLeadController.store);
router.delete('/contact/lead/generation/:id', ContactLeadController_1.ContactLeadController.destroy);
router.get('/promo-codes', ServicesPromoCodeController_1.ServicesPromoCodeController.index);
router.get('/promo-codes/:id', ServicesPromoCodeController_1.ServicesPromoCodeController.show);
router.put('/promo-codes/:id', ServicesPromoCodeController_1.ServicesPromoCodeController.update);
router.delete('/promo-codes/:id', ServicesPromoCodeController_1.ServicesPromoCodeController.destroy);
router.post('/insert-service-promo-codes', ServicesPromoCodeController_1.ServicesPromoCodeController.insertServicePromoCodes);
router.get('/my-promo-codes/verify/:code', ServicesPromoCodeController_1.ServicesPromoCodeController.verifyPromoCodes);
router.get('/faq-list', FaqController_1.FaqController.FaqList);
router.get('/testimonial-list', TestimonialController_1.TestimonialController.TestimonialList);
router.post('/buy-revision', PayPalController_1.PayPalController.revisionSuccess);
router.post('/order/update-status/:id', OrderController_1.OrderController.updateStatus);
router.get('/generate-pdf', ExcelController_1.ExcelController.exportOrders);
router.get('/orders', auth_1.optionalAuth, OrderController_1.OrderController.index);
router.get('/orders/:id', auth_1.optionalAuth, OrderController_1.OrderController.show);
router.post('/orders', auth_1.optionalAuth, OrderController_1.OrderController.create);
router.put('/orders/:id/status', auth_1.optionalAuth, OrderController_1.OrderController.updateStatus);
router.get('/cart', auth_1.auth, CartController_1.CartController.index);
router.post('/cart', auth_1.auth, CartController_1.CartController.add);
router.put('/cart/:serviceId', auth_1.auth, CartController_1.CartController.update);
router.delete('/cart/:serviceId', auth_1.auth, CartController_1.CartController.remove);
router.post('/stripe/pay', auth_1.auth, PaymentController_1.PaymentController.stripePay);
router.post('/stripe/pay/guest', auth_1.optionalAuth, PaymentController_1.PaymentController.stripePay);
router.post('/stripe/intent', auth_1.auth, PaymentController_1.PaymentController.createPaymentIntent);
router.post('/stripe/intent/guest', auth_1.optionalAuth, PaymentController_1.PaymentController.createPaymentIntent);
router.post('/stripe/subscribe', auth_1.auth, PaymentController_1.PaymentController.stripeSubscribe);
router.post('/stripe/subscribe/guest', auth_1.optionalAuth, PaymentController_1.PaymentController.stripeSubscribe);
router.post('/paypal', auth_1.optionalAuth, PaymentController_1.PaymentController.paypal);
router.post('/create-subscription', auth_1.auth, PaymentController_1.PaymentController.createSubscription);
router.get('/fetch/order', auth_1.auth, PaymentController_1.PaymentController.getOrderDetails);
router.get('/user-orders/:user_id', PaymentController_1.PaymentController.userOrders);
router.post('/success', auth_1.optionalAuth, PaymentController_1.PaymentController.success);
router.get('/cancel', auth_1.optionalAuth, PaymentController_1.PaymentController.cancel);
router.post('/stripe/webhook', PaymentController_1.PaymentController.stripeWebhook);
router.post('/revision', auth_1.auth, RevisionController_1.RevisionController.store);
router.post('/revisions/user-flag/:id', auth_1.auth, RevisionController_1.RevisionController.flagUser);
router.get('/revisions/data', auth_1.auth, RevisionController_1.RevisionController.getData);
router.use('/', blog_1.default);
const admin_1 = __importDefault(require("./admin"));
router.use('/admin', admin_1.default);
exports.default = router;
//# sourceMappingURL=api.js.map